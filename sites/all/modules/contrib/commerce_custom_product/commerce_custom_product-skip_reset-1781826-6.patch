diff --git a/commerce_custom_product.module b/commerce_custom_product.module
index 008c133..8ddb8c6 100644
--- a/commerce_custom_product.module
+++ b/commerce_custom_product.module
@@ -128,7 +128,7 @@ function commerce_custom_product_line_item_types() {
  * @param $configure
  *   Boolean indicating whether or not line item type configuration should be
  *   performed in the event of a new line item type being saved.
- * @param $skip_rebuild
+ * @param $skip_reset
  *   Boolean indicating whether or not this save should result in the menu being
  *   rebuilt; defaults to FALSE. This is useful when you intend to perform many
  *   saves at once, as menu rebuilding is very costly to performance.
@@ -138,7 +138,7 @@ function commerce_custom_product_line_item_types() {
  *   type, either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating the
  *   type of query performed to save the line item type.
  */
-function commerce_custom_product_line_item_type_save($line_item_type, $configure = TRUE, $skip_rebuild = FALSE) {
+function commerce_custom_product_line_item_type_save($line_item_type, $configure = TRUE, $skip_reset = FALSE) {
   $op = drupal_write_record('commerce_product_line_item_type', $line_item_type, commerce_line_item_type_load($line_item_type['type']) ? 'type' : array());
   commerce_line_item_types_reset();
 
@@ -162,7 +162,7 @@ function commerce_custom_product_line_item_type_save($line_item_type, $configure
     module_invoke_all('commerce_custom_product_line_item_type_update', $line_item_type, $skip_reset);
   }
 
-  if (!$skip_rebuild) {
+  if (!$skip_reset) {
     variable_set('menu_rebuild_needed', TRUE);
   }
 